" Map IDE actions to IdeaVim: https://jb.gg/abva4t
" Find more examples here: https://jb.gg/share-ideavimrc
"=========================================================================================
" Idea Shortcut Conflicts
sethandler <S-CR> a:ide
sethandler <C-Pageup> a:vim
sethandler <C-Pagedown> a:vim
sethandler <C-Up> a:ide
sethandler <C-Down> a:ide
sethandler <C-Left> a:ide
sethandler <C-Right> a:ide
sethandler <S-Up> a:ide
sethandler <S-Down> a:ide
sethandler <S-Left> a:ide
sethandler <S-Right> a:ide
sethandler <C-2> a:vim
sethandler <C-S-2> a:vim
sethandler <C-6> a:vim
sethandler <C-S-6> a:vim
sethandler <C-;> a:vim
sethandler <C-S-;> a:vim
sethandler <C-A> a:vim
sethandler <C-B> a:vim
sethandler <C-C> a:vim
sethandler <C-D> a:vim
sethandler <C-E> a:vim
sethandler <C-F> a:vim
sethandler <C-G> a:vim
sethandler <C-H> a:vim
sethandler <C-I> a:vim
sethandler <C-J> a:vim
sethandler <C-K> a:vim
sethandler <C-L> a:vim
sethandler <C-M> a:vim
sethandler <C-O> a:vim
sethandler <C-Q> a:vim
sethandler <C-R> a:vim
sethandler <C-S> a:vim
sethandler <C-T> a:vim
sethandler <C-U> a:vim
sethandler <C-V> a:vim
sethandler <C-W> a:vim
sethandler <C-Y> a:vim
sethandler <C-[> a:vim
sethandler <C-\> a:vim
sethandler <C-]> a:vim
sethandler <C-N> a:ide
sethandler <C-P> a:ide
sethandler <C-X> a:ide
sethandler <C-S-s> a:vim
sethandler <C-S-v> a:vim
sethandler <C-S-w> a:vim
"=========================================================================================
" Plugins
set NERDTree                " vim menu: o, O,x,X,p,P,m
set which-key               " comment command
set peekaboo                " preview for ctrl-r in insert mode
set ideamarks               " map vim marks to IDEA global marks
set highlightedyank         " highlighted yank
set matchit                 " Extended matching. use % and g%
set vim-paragraph-motion    " The curly braces {} can jump to a blank line with spaces
set quickscope              " quick navigation on a line
set easymotion              " jump: <leader><leader> + f/t/w/b/e/ge/j/k
set mini-ai                 " extend textobj quotes(q) and brackets(b): {motion}{q/b}
set textobj-indent          " indent object: {motion}{i/I}
set argtextobj              " argument text objects: {motion}a
set functiontextobj         " {motion} for function(f)
set textobj-entire          " {motion}ae or ie
set commentary              " use gc{motion} to comment
set exchange                " cx{motion} to exchange, or X in vMode
set ideajoin                " J to join
set surround                " modify surroundings: ys, cs, ds, S
set switch                  " switch some text under the cursor based on regex patterns
set ReplaceWithRegister     " replace: gr
"set multiple-cursors       " has bug, and it conflicts with ideajoin, use mouse instead

" Plugins Config(plugins need installed)
"--IdeaVim-EasyMotion
"--Vim Peekaboo
"--Vim FunctionTextObj
"--Which-Key
set notimeout
let g:WhichKey_DefaultDelay=250
let g:WhichKey_FontFamily='JetBrains Mono'
let g:WhichKey_FontSize=18
"--IdeaVim-Quickscope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
"--Vim Switch
let g:switch_definitions = 'group:basic,group:java,group:rspec'

"=========================================================================================
" Config
set scrolloff=5
set number relativenumber
set hlsearch
set incsearch
set ignorecase
set smartcase

"=========================================================================================
" Keymap
"--close hlsearch
nnoremap <esc> :noh<CR><esc>
"--switch tab
nnoremap L gt
nnoremap H gT
"--set space as leader key
let mapleader="\<space>"
"--blackhole x
nnoremap x "_x
nnoremap X "_X
"--system clipboard map
map <C-c> "+y
map <C-S-v> "+p
"--replace ctrl x function by ctrl q
noremap <C-q> <C-x>
"--expand selection
vnoremap <C-w> :action EditorSelectWord <CR>
vnoremap <C-S-w> :action EditorUnSelectWord <CR>
"--repeatable indent/outdent
vnoremap < :action EditorUnindentSelection <CR>
vnoremap > :action EditorIndentLineOrSelection <CR>
"--rewrite jump-list
nnoremap <C-o> :action Back <CR>
nnoremap <C-i> :action Forward <CR>
"--easymotion
nmap s <Plug>(easymotion-s)
vmap s <Plug>(easymotion-s)
"--Vim Switch
nnoremap <C-s> :Switch<CR>
nnoremap <C-S-s> :SwitchReverse<CR>

"--Change action
let g:WhichKeyDesc_C= "c Change"

nnoremap cd :action RenameElement <CR><Right>
let g:WhichKeyDesc_CD= "cd change definition"
let g:WhichKeyDesc_CS= "cs change surround"
let g:WhichKeyDesc_CX= "cx exchange {motion}"
let g:WhichKeyDesc_CXX= "cxx line"
let g:WhichKeyDesc_CXC= "cxc clear"

"--Goto action
let g:WhichKeyDesc_G= "g Goto"

nnoremap gd :action GotoDeclaration <CR>
nnoremap gf :action FileStructurePopup <CR>
nnoremap gi :action GotoImplementation <CR>
nnoremap gs :action GotoSuperMethod <CR>
nnoremap gy :action GotoTypeDeclaration <CR>
let g:WhichKeyDesc_GD= "gd declaration/usages"
let g:WhichKeyDesc_GF= "gf file structure"
let g:WhichKeyDesc_GI= "gi implementations"
let g:WhichKeyDesc_GS= "gs super"
let g:WhichKeyDesc_GY= "gy type declaration"

nnoremap gq :action QuickImplementations <CR>
nnoremap gp :action SelectInProjectView <CR>
nnoremap ge :action RevealIn <CR>
let g:WhichKeyDesc_GQ= "gq quick definition"
let g:WhichKeyDesc_GP= "gp select in project view"
let g:WhichKeyDesc_GE= "ge open in explorer"

"---------------------------------- Leader Keymap ----------------------------------
let g:WhichKeyDesc_Leader= "<leader> Leader"
let g:WhichKeyDesc_Leader= "<leader><leader> EasyMotion Prefix"
"----------------------------------- A for Act -----------------------------------
nnoremap <leader>ac :action CopyReferencePopupGroup <CR>
nnoremap <leader>af :action ReformatCode \| :action OptimizeImports <CR>
vnoremap <leader>af :action ReformatCode \| :action OptimizeImports <CR>
nnoremap <leader>ag :action Generate <CR>
nnoremap <leader>ah :action TypeHierarchy <CR>
nnoremap <leader>ai :action ShowIntentionActions <CR>
vnoremap <leader>ai :action ShowIntentionActions <CR>
nnoremap <leader>am :action MethodHierarchy <CR>
nnoremap <leader>ap :action ShowPopupMenu <CR>
vnoremap <leader>ap :action ShowPopupMenu <CR>
nnoremap <leader>ar :action RefactoringMenu <CR>
vnoremap <leader>ar :action RefactoringMenu <CR>
nnoremap <leader>as :action SurroundWith <CR>
vnoremap <leader>as :action SurroundWith <CR>
nnoremap <leader>at :action InsertLiveTemplate <CR>
let g:WhichKeyDesc_Act= "<leader>a Act"
let g:WhichKeyDesc_Act_Reference= "<leader>ac copy reference"
let g:WhichKeyDesc_Act_Format= "<leader>af format"
let g:WhichKeyDesc_Act_Generate= "<leader>ag generate"
let g:WhichKeyDesc_Act_Hierarchy= "<leader>ah hierarchy(class)"
let g:WhichKeyDesc_Act_Intention= "<leader>ai intention actions"
let g:WhichKeyDesc_Act_MethodHierarchy= "<leader>am hierarchy(method)"
let g:WhichKeyDesc_Act_Popup= "<leader>ap popup menu"
let g:WhichKeyDesc_Act_Refactor= "<leader>ar refactor"
let g:WhichKeyDesc_Act_Surround= "<leader>as surround"
let g:WhichKeyDesc_Act_Template= "<leader>at template"
"--------------------------------- D for Debug ----------------------------------
nnoremap <leader>db :action ToggleLineBreakpoint <CR>
let g:WhichKeyDesc_Debug= "<leader>d Debug"
let g:WhichKeyDesc_Debug_Breakpoint= "<leader>db breakpoint"
"---------------------------------- M for Mark ----------------------------------
nnoremap <leader>mm :action ToggleBookmark <CR>
nnoremap <leader>me :action EditBookmark <CR>
nnoremap <leader>ms :marks <CR>
nnoremap <leader>mdb :delmarks! <CR>
nnoremap <leader>mdg :delmarks A-Z0-9 <CR>
nnoremap <leader>mda :delmarks! \| delmarks A-Z0-9 <CR>
let g:WhichKeyDesc_Mark= "<leader>m Marks"
let g:WhichKeyDesc_Mark_Bookmark= "<leader>mm mark"
let g:WhichKeyDesc_Mark_EditMark= "<leader>me edit"
let g:WhichKeyDesc_Mark_Show= "<leader>ms show"
let g:WhichKeyDesc_Mark_DeleteMarks= "<leader>md delete"
let g:WhichKeyDesc_Mark_DeleteBufferMarks= "<leader>mdb delete buffer marks"
let g:WhichKeyDesc_Mark_DeleteGlobalMarks= "<leader>mdg delete global marks"
let g:WhichKeyDesc_Mark_DeleteAllMarks= "<leader>mda delete all marks"
"-------------------------------- W for Windows ---------------------------------
nnoremap <leader>wp :NERDTreeToggle <CR>
nnoremap <leader>wr :action RecentFiles <CR>
nnoremap <leader>wd :action ToggleRenderedDocPresentationForAll <CR>
nnoremap <leader>wo :action CloseAllEditorsButActive <CR>
nnoremap <leader>ww :action CloseEditor <CR>
nnoremap <leader>wz :action ToggleZenMode <CR>
nnoremap <leader>wf :action ToggleFullScreen <CR>
nnoremap <leader>wn :action ToggleDistractionFreeMode <CR>
nnoremap <leader>wc :action HideAllWindows <CR>
vnoremap <leader>wt :action Translation.EditorTranslateAction <CR>
let g:WhichKeyDesc_Windows= "<leader>w Windows"
let g:WhichKeyDesc_Windows_ProjectView= "<leader>wp project view"
let g:WhichKeyDesc_Windows_RecentFiles= "<leader>wr recent files"
let g:WhichKeyDesc_Windows_RenderDoc= "<leader>wd render document"
let g:WhichKeyDesc_Windows_CloseOtherTab= "<leader>wo close other editors"
let g:WhichKeyDesc_Windows_CloseActiveTab= "<leader>ww close active editor"
let g:WhichKeyDesc_Windows_Zen= "<leader>wz zen mode"
let g:WhichKeyDesc_Windows_Full= "<leader>wf full screen"
let g:WhichKeyDesc_Windows_NoDistract= "<leader>wn no distract mode"
let g:WhichKeyDesc_Windows_HideAllWindows= "<leader>wc hide all windows"
let g:WhichKeyDesc_Windows_Translation= "<leader>wt translation"